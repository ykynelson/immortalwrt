name: Build ImmortalWrt IMG (BIOS, Hyper-V friendly)

on:
  workflow_dispatch:

jobs:
  build-img:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout workflow repo
        uses: actions/checkout@v4

      # 释放磁盘空间，避免 No space left on device
      - name: Free disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc || true
          sudo apt-get clean
          df -h

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses5-dev libssl-dev python3-distutils rsync unzip \
            zlib1g-dev file wget curl

      - name: Clone ImmortalWrt
        run: |
          git clone --depth=1 https://github.com/immortalwrt/immortalwrt.git
          cd immortalwrt
          # 如需固定版本可改为：git checkout v24.0.0

          # 加入第三方 feeds（OpenClash/Passwall）
          # 如果你不需要它们，可注释掉下面两行
          echo 'src-git openclash https://github.com/vernesong/OpenClash.git;master' >> feeds.conf.default
          echo 'src-git passwall https://github.com/xiaorouji/openwrt-passwall.git;main' >> feeds.conf.default

          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate .config (x86_64 BIOS + packages)
        run: |
          cd immortalwrt
          cat > .config <<'EOF'
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y
          # 关闭仅 EFI 镜像，保留 BIOS 兼容
          CONFIG_EFI_IMAGES=n

          # 你要的包；若第三方源不兼容，会在 defconfig 时提示，可按需删减
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_samba4-server=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_wget=y
          CONFIG_PACKAGE_nano=y
          EOF

          make defconfig

      - name: Build firmware (with fallback)
        run: |
          cd immortalwrt
          # 先把源码下载好，再编译；失败则降级到单线程便于排错
          make -j$(nproc) download
          make -j$(nproc) || make -j1 V=s

      - name: Collect IMG (combined image only)
        run: |
          set -euxo pipefail
          OUT_DIR="$GITHUB_WORKSPACE/output"
          mkdir -p "$OUT_DIR"
          cd immortalwrt/bin/targets/x86/64/
          ls -lh

          # 优先找 squashfs 组合镜像，其次 ext4；不限定文件名前缀，兼容 immortalwrt/openwrt 命名
          IMG_GZ=$(ls *-squashfs-combined*.img.gz 2>/dev/null | head -n 1 || true)
          if [ -z "$IMG_GZ" ]; then
            IMG_GZ=$(ls *-ext4-combined*.img.gz 2>/dev/null | head -n 1 || true)
          fi
          if [ -z "$IMG_GZ" ]; then
            echo "ERROR: No combined .img.gz found in $(pwd)"
            ls -lah
            exit 1
          fi

          echo "Found image: $IMG_GZ"
          cp "$IMG_GZ" "$OUT_DIR/"

          # 同时产出解压后的 .img，方便直接写盘/导入
          IMG="${IMG_GZ%.gz}"
          gzip -dc "$IMG_GZ" > "$OUT_DIR/$IMG"

      - name: Upload IMG artifacts
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-img
          path: |
            output/*.img
            output/*.img.gz
